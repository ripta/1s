-- seqlen
--
-- `seqlen` calculates the length of any sequence at the top of the stack,
-- and then buries it under the top of the stack.
--
-- Example: [ 1 2 3 ] seqlen == 3 [ 1 2 3 ]
[ [ len ] [] both ] [ seqlen ] :

-- Length iterator and operator
-- [SEQ] [TRANSFORM] lenoper
--
-- `lenoper` creates a transformation operator and places the length under it.
--
-- Example: [ 10 20 30 ] [ 2 + ] lenoper == 3 [ [ 10 20 30 ] nth 2 + ]
[ seqlen [ nth ] cons ] [ leniter ] :
[ [ leniter ] dip cat ] [ lenoper ] :

[ seqlen over 1 - unit [ [ swap - ] cat dip nth ] cons cons ] [ lenreviter ] :
[ [ lenreviter ] dip cat ] [ lenrevoper ] :

-- Example: 1 5 [ 2 * ] each-int-range
-- [ 2dup1 lt? [ [ k ] 3keep [ 1 + ] 2dip each-int-range ] [ 3zap ] if ] [ each-int-range ] :

-- N [QUOTE*] repcat
-- N [QUOTE*] [START*] repcat-into
--
-- `repcat` evaluates the QUOTE* block N times and accumulates the result into a
-- quoted block at the top of the stack.
--
-- `repcat-into` acts as `repcat` with the change that accumulation happens into
-- the START* block instead of an empty block.
--
-- Example: 3 [ 2 ] repcat == [ 2 2 2 ]
--          3 [ 4 ] [ 5 6 ] repcat-into == [ 4 4 4 5 6 ]
--          5 [ dup len ] blockfill == [ 4 3 2 1 0 ]
[ swap [ swons ] cat swap 2bury times ] [ repcat-into ] :
[ [] repcat-into ] [ repcat blockfill ] :
[ [ 0 ] blockfill ] [ zerofill ] :

-- Sequence modification operator
-- INDEX [TRANSFORM] [SEQ] collect-into == [[SEQ']]
-- [SEQ] INDEX [TRANSFORM] collect-into* == [[SEQ']]
--
-- `collect-into` evaluates TRANSFORM using the INDEX and inserts it at INDEX
-- in SEQ, producing the new sequence SEQ'. The result of `collect-into` is
-- quoted, and must thus be applied (`i`) in order to produce a value.
--
-- `collect-into*` is a convenience function with the arguments rotated.
--
-- Example: 3 [ 20 * ] [ 0 0 0 0 0 ] collect-into i  == [ 0 0 0 60 0 ]
--          [ 0 0 0 0 0 ] 3 [ 20 * ] collect-into* i == [ 0 0 0 60 0 ]
[ [ 2dig [ sip ] dip nth= ] cons ] [ collect-into* ] :
[ 2bury collect-into* ] [ collect-into ] :

-- Repeated sequence modification
-- LOWERBOUND UPPERBOUND [TRANSFORM] [SEQ] collect == [SEQ']
-- UPPERBOUND [TRANSFORM] [SEQ] 0,collect == [SEQ']
--
-- `collect` repeatedly applies TRANSFORM to SEQ with consecutive indices
-- from LOWERBOUND to UPPERBOUND, producing new sequence SEQ'.
--
-- `0,collect` is a convenience word, where LOWERBOUND is 0.
--
-- Example: 0 5 [ 6 + ] [ 0 0 0 0 0 ] collect == [ 6 7 8 9 10 ]
--          5 [ 6 + ] [ 0 0 0 0 0 ] 0,collect == [ 6 7 8 9 10 ]
[ 3bury collect-into* upto ] [ collect ] :
[ collect-into 0,upto ] [ 0,collect ] :

-- Repeated accumulation
-- LOWERBOUND UPPERBOUND [QUOTE] [SEQ] accumulate == [SEQ']
-- UPPERBOUND [QUOTE] [SEQ] 0,accumulate == [SEQ']
--
-- `accumulate` (or `acc` for short) repeatedly accumulates QUOTE into SEQ,
-- forming SEQ', without evaluating QUOTE.
--
-- Example: [ + ] 3 [ * ] accumulate-into* i == [ + * ]
--          0 5 [ + ] [] accumulate == [ + + + + + ]
--          5 [ + ] [] 0,accumulate == [ + + + + + ]
[ [ swap zap cat ] cons ] [ accumulate-into* ] :
[ 2bury accumulate-into* ] [ accumulate-into ] :
[ 3bury accumulate-into* upto ] [ accumulate acc ] :
[ accumulate-into 0,upto ] [ 0,accumulate 0,acc ] :

-- Repeated quotation
-- NUM [QUOTE] repquot == [SEQ]
--
-- Example: 5 [ + ] repquot == [ + + + + + ]
[ [] 0,accumulate ] [ repquot ] :

-- LEN [TRANSFORM] accumulate-upto
--
-- `accumulate-upto` repeatedly accumulates from 0 upto LEN, evaluating
-- TRANSFORM for each.
--
-- Example: 5 [] accumulate-upto == [ 0 1 2 3 4 ]
--          5 [ dup * ] accumulate-upto == [ 0 1 4 9 16 ]
--          5 [] accumulate-downfrom == [ 4 3 2 1 0 ]
[ over zerofill 0,collect ] [ accumulate-upto ] :
[ over 1 - unit [ swap - ] cat swat accumulate-upto ] [ accumulate-downfrom ] :

-- [START END) [QUOTE*] find-in-range == INDEX-OR-#false
--
-- `find-in-range` finds the first index between START (inclusive) to
-- END (exclusive) for which QUOTE* evaluates to #true. If QUOTE* never
-- evaluates to #true and we reach END, then the word itself evaluates to
-- #false.
--
-- Example: 0 10 [ 5 gt? ] find-in-range == 6
--          0 10 [ 22 gt? ] find-in-range == #false
[
    2over lt?
        [ [ zap1 i ] 3keep 3dig [ 2zap swap zap ] [ [ 1 + ] 2dip find-in-range ] if ]
        [ 3zap #false ]
    if
] [ find-in-range find-integer-from ] :

[ [ lenoper find-in-range ] 2keep zap ] [ find-in ] :

-- INDEX [SEQ] bounds? == BOOL
--
-- `bounds?` determines whether the INDEX is in bounds of the length of SEQ.
--
-- Example: 10 [ 10 20 30 40 50 ] bounds? == #false
--          2  [ 10 20 30 40 50 ] bounds? == #true
--          -1 [ 10 20 30 40 50 ] bounds? == #false
[ over 0 gte? [ len lt? ] [ 2zap #false ] if ] [ bounds? ] :

-- INDEX [SEQ] [TRUE-BLOCK] [FALSE-BLOCK] safe-bounds-run
--
-- `safe-bounds-run` evaluates TRUE-BLOCK if INDEX is within safe bounds.
-- Otherwise, FALSE-BLOCK is evaluated.
--
-- Example: 9 [ 10 20 30 40 50 ] [ nth ] [ 2zap #false ] safe-bounds-run == #false
--          1 [ 10 20 30 40 50 ] [ nth ] [ 2zap #false ] safe-bounds-run == 20
--          -1 [ 10 20 30 40 50 ] [ nth ] [ 2zap #false ] safe-bounds-run == #false
[ [ 2dup bounds? ] 2dip if ] [ safe-bounds-run ] :

-- `index&element`
-- Example: 4 [ 10 20 30 40 50 ] i&e == 4 50
--          #false [ 10 20 30 40 50 ] i&e == #false #false
[ dup1 dup any? 2dig [ nth ] cons [] if ] [ index&element i&e ] :

-- START [SEQ] [PRED?] find == INDEX ELEMENT
--
-- `find` finds the first index and element, between START and the length of
-- SEQ, for which PRED? evaluates to #true. If PRED? never evaluates to #true
-- and we reach END, then the word itself evaluates to #false.
--
-- `0,find` starts the `find` from 0.
--
[ find-in i&e ] [ find ] :
[ [ 0 ] 2dip find-in i&e ] [ 0,find ] :

-- [SEQ] [TRANSFORM] map == [SEQ']
-- [SEQ] [TRANSFORM] revmap == [SEQ']
-- [SEQ] rev == [SEQ']
--
-- `map` evaluates TRANSFORM for every value in SEQ in index order, producing
-- a new SEQ'. `revmap` evaluates in reverse index order.
--
-- `rev` is a convenience word to reverse the order of a block.
--
-- Example: [ 10 20 30 ] [ 2 + ] map == [ 12 22 32 ]
--          [ 10 20 30 ] [ 2 + ] revmap == [ 32 22 32 ]
--          [ 10 20 30 ] rev == [ 30 20 10 ]
[ lenoper accumulate-upto ] [ map ] :
[ lenrevoper accumulate-upto ] [ revmap ] :
[ [] lenrevoper accumulate-upto ] [ rev ] :

-- Padded bit array
-- INT MIN-BITS int->bits/n
--
-- `int->bits/n` converts INT into a bit array with a minimum of MIN-BITS.
--
-- Example: 3 int->bits == [ 1 1 ]
--          3 8 int->bits/n        == [ 0 0 0 0 0 0 1 1 ]
--          3 int->bits 8 pad-left == [ 0 0 0 0 0 0 1 1 ]
[ 2 swap ** + int->bits uncons nip ] [ int->bits/n ] :
[ over len - dup 0 gt? [ [ 0 ] 2dig repcat-into ] [ zap ] if ] [ pad-left ] :

-- LEN make-bit-mask
--
-- Example: 2 make-bit-mask == [ [ 0 0 ] [ 0 1 ] [ 1 0 ] [ 1 1 ] ]
[ 2 swap ** dup [ + int->bits uncons nip ] cons accumulate-upto ] [ make-bit-mask ] :

-- [SEQ1*] [SEQ2*] [SEP*] join == [SEQ1* SEP* SEQ*]
--
-- `join` concatenates SEQ1 and SEQ2, inserting SEP between them.
--
-- Example: [ 1 2 ] dup [ 3 ] join == [ 1 2 3 1 2 ]
[ swat cat ] [ join ] :

-- FROM TO [SEQ] subseq == [SEQ']
-- NUM [SEQ] head == [SEQ']
--
-- `head` takes the first NUM elements from SEQ and discards the rest.
--
-- Example: 3 [ 1 2 3 4 5 6 7 ] head == [ 1 2 3 ]
--          3 [ 1 2 3 4 5 6 7 ] tail == [ 5 6 7 ]
--          2 4 [ 1 2 3 4 5 6 7 8 ] subseq == [ 3 4 ]
[ [ nth ] cons over zerofill 0,collect ] [ head ] :
[ dup len 1 - 2dig - [ dup 0 gte? ] [ [ seqrest ] dip 1 - ] while zap ] [ tail ] :
[ [ dup ] 2dip 2dig [ dup len ] dip - swap tail [ swap - ] dip head ] [ subseq ] :
