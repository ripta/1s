-- seqlen
--
-- `seqlen` calculates the length of any sequence at the top of the stack,
-- and then buries it under the top of the stack.
--
-- Example: [ 1 2 3 ] seqlen == 3 [ 1 2 3 ]
[ [ len ] [] both ] [ seqlen ] :

[ seqlen [ nth ] cons ] [ iterlen ] :
[ [ iterlen ] dip cat ] [ operlen ] :

-- Example: 1 5 [ 2 * ] each-int-range
-- [ 2dup1 lt? [ [ k ] 3keep [ 1 + ] 2dip each-int-range ] [ 3zap ] if ] [ each-int-range ] :

-- N [QUOTE*] repcat
-- N [QUOTE*] [START*] repcat-into
--
-- `repcat` evaluates the QUOTE* block N times and accumulates the result into a
-- quoted block at the top of the stack.
--
-- `repcat-into` acts as `repcat` with the change that accumulation happens into
-- the START* block instead of an empty block.
--
-- Example: 3 [ 2 ] repcat == [ 2 2 2 ]
--          3 [ 4 ] [ 5 6 ] repcat-into == [ 4 4 4 5 6 ]
--          5 [ dup len ] blockfill == [ 4 3 2 1 0 ]
[ swap [ swons ] cat swap 2bury times ] [ repcat-into ] :
[ [] repcat-into ] [ repcat blockfill ] :

-- Sequence modification operator
-- INDEX [TRANSFORM] [SEQ] collect-into == [[SEQ']]
-- [SEQ] INDEX [TRANSFORM] collect-into* == [[SEQ']]
--
-- `collect-into` evaluates TRANSFORM using the INDEX and inserts it at INDEX
-- in SEQ, producing the new sequence SEQ'. The result of `collect-into` is
-- quoted, and must thus be applied (`i`) in order to produce a value.
--
-- `collect-into*` is a convenience function with the arguments rotated.
--
-- Example: 3 [ 20 * ] [ 0 0 0 0 0 ] collect-into i  == [ 0 0 0 60 0 ]
--          [ 0 0 0 0 0 ] 3 [ 20 * ] collect-into* i == [ 0 0 0 60 0 ]
[ [ 2dig [ sip ] dip nth= ] cons ] [ collect-into* ] :
[ 2bury collect-into* ] [ collect-into ] :

-- Repeated sequence modification
-- LOWERBOUND UPPERBOUND [TRANSFORM] [SEQ] collect == [SEQ']
-- UPPERBOUND [TRANSFORM] [SEQ] 0,collect == [SEQ']
--
-- `collect` repeatedly applies TRANSFORM to SEQ with consecutive indices
-- from LOWERBOUND to UPPERBOUND, producing new sequence SEQ'.
--
-- `0,collect` is a convenience word, where LOWERBOUND is 0.
--
-- Example: 0 5 [ 6 + ] [ 0 0 0 0 0 ] collect == [ 6 7 8 9 10 ]
--          5 [ 6 + ] [ 0 0 0 0 0 ] 0,collect == [ 6 7 8 9 10 ]
[ 3bury collect-into* upto ] [ collect ] :
[ 2bury collect-into* 0,upto ] [ 0,collect ] :
